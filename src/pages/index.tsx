import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import Header from "~/components/Header";
import NoteCard from "~/components/NoteCard";
import NoteEditor from "~/components/NoteEditor";
import { api, type RouterOutputs } from "~/utils/api";
import { Poppins } from "next/font/google";

const poppins = Poppins({
    weight: ["100", "200", "300", "400", "500", "600", "700", "800", "900"],
    subsets: ["latin"],
});

const Home: NextPage = () => {
    return (
        <>
            <Head>
                <title>Note app</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={poppins.className}>
                <Header />
                <Content />
            </main>
        </>
    );
};

type Topic = RouterOutputs["topic"]["getAll"][0];

function Content() {
    const { data: session } = useSession();
    const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);

    const { data: topics, refetch: refetchTopic } = api.topic.getAll
        .useQuery(undefined, {
            onSuccess: (data) => {
                setSelectedTopic(selectedTopic ?? data[0] ?? null);
            },
            enabled: session?.user?.id != undefined,
        });
    const createTopic = api.topic.create.useMutation({
        onSuccess: () => {
            void refetchTopic();
        },
    });

    const { data: notes, refetch: refetchNote, isLoading: isNotesLoading } = api
        .note.getAll.useQuery({
            topicId: selectedTopic?.id ?? "",
        }, {
            enabled: session?.user?.id != undefined && selectedTopic != null,
        });

    const createNote = api.note.create.useMutation({
        onSuccess: () => {
            void refetchNote();
        },
    });

    const deleteNote = api.note.delete.useMutation({
        onSuccess: () => {
            void refetchNote();
        },
    });

    if (!session) {
        return (
            <main className="h-[80vh] w-screen grid place-content-center ">
                <article className="prose lg:prose-xl">
                    <h2 className="text-slate-300 font-normal">
                        Sign in to create notes
                    </h2>
                </article>
            </main>
        );
    }
    return (
        <section className="m-5 grid grid-cols-3 gap-2">
            <article className="px-2">
                <h3 className="text-xl font-medium mb-2.5">Topics</h3>
                <ul className="menu divide-y border rounded-xl">
                    {topics?.map((topic) => (
                        <li className="" key={topic.id}>
                            <a
                                href="#"
                                onClick={(evt) => {
                                    evt.preventDefault();
                                    setSelectedTopic(topic);
                                }}
                            >
                                {topic.title}
                            </a>
                        </li>
                    ))}
                </ul>{" "}
                <div className="divider">
                </div>
                <input
                    onKeyDown={(e) => {
                        if (e.key === "Enter") {
                            createTopic.mutate({
                                title: e.currentTarget.value,
                            });
                            e.currentTarget.value = "";
                        }
                    }}
                    type="text"
                    placeholder="Add a topic"
                    className="input input-bordered input-sm w-full"
                />
            </article>
            <article className="col-span-2">
                <h3 className="text-xl font-medium mb-2.5">
                    Notes {isNotesLoading ? "Loading..." : ""}
                </h3>
                <ul>
                    {notes?.map((note) => (
                        <li key={note.id}>
                            <NoteCard
                                note={note}
                                isLoading={isNotesLoading}
                                onDelete={() =>
                                    void deleteNote.mutate({
                                        id: note.id,
                                    })}
                            />
                        </li>
                    ))}
                </ul>

                {!isNotesLoading &&
                    (
                        <NoteEditor
                            onSave={({ title, content }) => {
                                void createNote.mutate({
                                    title,
                                    content,
                                    topicId: selectedTopic?.id ?? "",
                                });
                            }}
                        />
                    )}
            </article>
        </section>
    );
}

export default Home;
